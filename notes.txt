chat
-docker-compose.yml
-backend
--Dockerfile
--app
---php symfony stuff
-frontend
--Dockerfile
--app
---react stuff
------------------------------

BACKEND STUFF:

setting up the project:

build backend with command:
docker-compose up --build -d

install symfony skeleton:
docker-compose run --rm backend composer create-project symfony/skeleton .

run server with command:
docker-compose exec backend php -S 0.0.0.0:8000 -t public

run websocket:
docker-compose exec backend php bin/console app:websocket-server

install api:
docker-compose exec backend composer require api

install orm:
docker-compose exec backend composer require symfony/orm-pack

install serializer:
docker-compose exec backend composer require symfony/serializer-pack

security core for password hashing:
docker-compose exec backend composer require symfony/security-core

websocket package:
docker-compose exec backend composer require cboden/ratchet

maker bundle:
docker-compose exec backend composer require --dev symfony/maker-bundle

show compose packages:
docker-compose exec backend composer show


create the database:
docker-compose exec backend php bin/console doctrine:database:create

verify that database exists:
docker-compose exec chat_db mysql -u root -proot
SHOW DATABASES;

if it exists already, you can drop it with this command and then recreate it:
docker-compose exec chat_db mysql -u root -proot -e "DROP DATABASE chat_db;"

-------------------------------------------------------------------

recreating the database:
docker-compose exec chat_db mysql -u root -proot -e "DROP DATABASE chat_db;"
docker-compose exec backend php bin/console doctrine:database:create
docker-compose exec backend php bin/console doctrine:migrations:migrate

-------------------------------------------------------------

create entities with make tool:
docker-compose exec backend php bin/console make:entity User

create controllers with make tool:
docker-compose exec backend php bin/console make:controller UserController

check that files in docker:
docker-compose exec backend ls /var/www/html/src/Entity/

clear doctrine cache:
docker-compose exec backend php bin/console cache:clear
docker-compose exec backend php bin/console doctrine:cache:clear-metadata 

inspect doctrine mappings:
docker-compose exec backend php bin/console doctrine:mapping:info

migration status:
docker-compose exec backend php bin/console doctrine:migrations:status

list migrations:
docker-compose exec backend php bin/console doctrine:migrations:list

validate doctrine mappings:
docker-compose exec backend php bin/console doctrine:schema:validate

generate diff:
docker-compose exec backend php bin/console doctrine:migrations:diff

create doctrine schemas:
docker-compose exec backend php bin/console doctrine:schema:create

run migrations:
docker-compose exec backend php bin/console doctrine:migrations:migrate
docker-compose exec backend php bin/console make:migration

update if migration table was left behind for some reason ??
docker-compose exec backend php bin/console doctrine:schema:update --force -v



debug routes:
docker-compose exec backend php bin/console debug:router -v

restart server:
docker-compose exec backend php bin/console server:restart

JWT authentication:
docker-compose exec backend composer remove lexik/jwt-authentication-bundle
docker-compose exec backend composer require lexik/jwt-authentication-bundle
mkdir -p config/jwt
openssl genpkey -algorithm RSA -out config/jwt/private.pem -pkeyopt rsa_keygen_bits:4096
openssl rsa -pubout -in config/jwt/private.pem -out config/jwt/public.pem




FRONTEND STUFF:

audit npm packages:
docker-compose exec frontend npm audit --production

install new npm packages:
docker-compose exec frontend npm install react-router-dom


